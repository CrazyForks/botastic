// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"github.com/pandodao/botastic/config"
	"github.com/pandodao/botastic/internal/httpd"
	"github.com/pandodao/botastic/internal/llms"
	"github.com/pandodao/botastic/internal/starter"
	"github.com/pandodao/botastic/pkg/chanhub"
	"github.com/pandodao/botastic/state"
	"github.com/pandodao/botastic/storage"
)

// Injectors from wire.go:

func provideHttpdStarter() (starter.Starter, error) {
	string2 := _wireStringValue
	configConfig, err := config.Init(string2)
	if err != nil {
		return nil, err
	}
	httpdConfig := configConfig.Httpd
	dbConfig := configConfig.DB
	handler, err := storage.Init(dbConfig)
	if err != nil {
		return nil, err
	}
	llMsConfig := configConfig.LLMs
	llmsHandler := llms.New(llMsConfig)
	hub := chanhub.New()
	stateConfig := configConfig.State
	stateHandler := state.New(stateConfig, handler, llmsHandler, hub)
	httpdHandler := httpd.NewHandler(handler, llmsHandler, hub, stateHandler)
	server := httpd.New(httpdConfig, httpdHandler)
	v := provideStarters(server, stateHandler)
	starterStarter := starter.Multi(v...)
	return starterStarter, nil
}

var (
	_wireStringValue = cfgFile
)

// wire.go:

func provideStarters(s1 *httpd.Server, s2 *state.Handler) []starter.Starter {
	return []starter.Starter{s1, s2}
}
